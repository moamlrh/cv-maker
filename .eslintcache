[{"D:\\Projects\\cv-maker\\src\\App.jsx":"1","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\index.jsx":"2","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Perosnal\\Perosnal.jsx":"3","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\utili.jsx":"4","D:\\Projects\\cv-maker\\src\\index.js":"5","D:\\Projects\\cv-maker\\src\\Redux\\Reducer.jsx":"6","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Experiences.jsx":"7","D:\\Projects\\cv-maker\\src\\Redux\\Actions.jsx":"8","D:\\Projects\\cv-maker\\src\\Redux\\Store.jsx":"9","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\resumeObjective.jsx":"10","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\Interests.jsx":"11","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\ResumeObjective.jsx":"12","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\Hobby.jsx":"13","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Template\\Template.jsx":"14"},{"size":430,"mtime":1609231749178,"results":"15","hashOfConfig":"16"},{"size":442,"mtime":1609232397742,"results":"17","hashOfConfig":"16"},{"size":3369,"mtime":1609237824762,"results":"18","hashOfConfig":"16"},{"size":6604,"mtime":1609231166606,"results":"19","hashOfConfig":"16"},{"size":197,"mtime":1609058012881,"results":"20","hashOfConfig":"16"},{"size":728,"mtime":1609231134727,"results":"21","hashOfConfig":"16"},{"size":540,"mtime":1609225971068,"results":"22","hashOfConfig":"16"},{"size":503,"mtime":1609231071888,"results":"23","hashOfConfig":"16"},{"size":293,"mtime":1609091997876,"results":"24","hashOfConfig":"16"},{"size":1466,"mtime":1609094774129,"results":"25","hashOfConfig":"16"},{"size":1335,"mtime":1609183291978,"results":"26","hashOfConfig":"16"},{"size":1466,"mtime":1609094774129,"results":"27","hashOfConfig":"16"},{"size":3821,"mtime":1609226399300,"results":"28","hashOfConfig":"16"},{"size":1964,"mtime":1609231251232,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c20me0",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\Projects\\cv-maker\\src\\App.jsx",[],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\index.jsx",[],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Perosnal\\Perosnal.jsx",[],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\utili.jsx",["63"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Stepper from \"@material-ui/core/Stepper\";\r\nimport Step from \"@material-ui/core/Step\";\r\nimport StepLabel from \"@material-ui/core/StepLabel\";\r\nimport {\r\n  Check,\r\n  Person,\r\n  Description,\r\n  Edit,\r\n  ArrowRight,\r\n  ArrowLeft,\r\n} from \"@material-ui/icons\";\r\nimport StepConnector from \"@material-ui/core/StepConnector\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PersonalComp from \"./Perosnal/Perosnal\";\r\nimport \"./utili.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { changeCvMakerTitle } from \"../../Redux/Actions\";\r\nimport ExperiencesComp from \"./Experiences/Experiences\";\r\nimport TemplateComp from \"./Template/Template\";\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n  root: {\r\n    color: \"#eaeaf0\",\r\n    display: \"flex\",\r\n    height: 22,\r\n    alignItems: \"center\",\r\n  },\r\n  active: {\r\n    color: \"#784af4\",\r\n  },\r\n  circle: {\r\n    width: 8,\r\n    height: 8,\r\n    borderRadius: \"50%\",\r\n    backgroundColor: \"currentColor\",\r\n  },\r\n  completed: {\r\n    color: \"#784af4\",\r\n    zIndex: 1,\r\n    fontSize: 18,\r\n  },\r\n});\r\n\r\nfunction QontoStepIcon(props) {\r\n  const classes = useQontoStepIconStyles();\r\n  const { active, completed } = props;\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n      })}\r\n    >\r\n      {completed ? (\r\n        <Check className={classes.completed} />\r\n      ) : (\r\n        <div className={classes.circle} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nQontoStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n};\r\n\r\nconst ColorlibConnector = withStyles({\r\n  alternativeLabel: {\r\n    top: 22,\r\n  },\r\n  active: {\r\n    \"& $line\": {\r\n      backgroundImage:\r\n        \"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)\",\r\n    },\r\n  },\r\n  completed: {\r\n    \"& $line\": {\r\n      backgroundImage:\r\n        \"linear-gradient( 95deg,rgb(242,113,33) 0%,rgb(233,64,87) 50%,rgb(138,35,135) 100%)\",\r\n    },\r\n  },\r\n  line: {\r\n    height: 3,\r\n    border: 0,\r\n    backgroundColor: \"#eaeaf0\",\r\n    borderRadius: 1,\r\n  },\r\n})(StepConnector);\r\n\r\nconst useColorlibStepIconStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: \"#ccc\",\r\n    zIndex: 1,\r\n    color: \"#fff\",\r\n    width: 50,\r\n    height: 50,\r\n    display: \"flex\",\r\n    borderRadius: \"50%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  active: {\r\n    backgroundImage:\r\n      \"linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)\",\r\n    boxShadow: \"0 4px 10px 0 rgba(0,0,0,.25)\",\r\n  },\r\n  completed: {\r\n    backgroundImage:\r\n      \"linear-gradient( 136deg, rgb(242,113,33) 0%, rgb(233,64,87) 50%, rgb(138,35,135) 100%)\",\r\n  },\r\n});\r\n\r\nfunction ColorlibStepIcon(props) {\r\n  const classes = useColorlibStepIconStyles();\r\n  const { active, completed } = props;\r\n  const icons = {\r\n    1: <Person />,\r\n    2: <Description />,\r\n    3: <Edit />,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx(classes.root, {\r\n        [classes.active]: active,\r\n        [classes.completed]: completed,\r\n      })}\r\n    >\r\n      {icons[String(props.icon)]}\r\n    </div>\r\n  );\r\n}\r\n\r\nColorlibStepIcon.propTypes = {\r\n  /**\r\n   * Whether this step is active.\r\n   */\r\n  active: PropTypes.bool,\r\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\r\n  completed: PropTypes.bool,\r\n  /**\r\n   * The label displayed in the step icon.\r\n   */\r\n  icon: PropTypes.node,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return [\"Perosnal\", \"Experiences\", \"Template\"];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return <PersonalComp />;\r\n    case 1:\r\n      return <ExperiencesComp />;\r\n    case 2:\r\n      return <TemplateComp />;\r\n    default:\r\n      return \"Unknown step\";\r\n  }\r\n}\r\n\r\nfunction CustomizedSteppers({ setCvMakerTitle, templateURL }) {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const steps = getSteps();\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n  useEffect(() => {\r\n    if (activeStep === 0) {\r\n      setCvMakerTitle(\"Personal details\");\r\n    } else if (activeStep === 1) {\r\n      setCvMakerTitle(\"My experiences\");\r\n    } else if (activeStep === 2) {\r\n      setCvMakerTitle(\"Select template\");\r\n    }\r\n  }, [activeStep]);\r\n  const downloadResume = (e) => {\r\n    window.open(templateURL);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper\r\n        className=\"stepper-title\"\r\n        alternativeLabel\r\n        activeStep={activeStep}\r\n        connector={<ColorlibConnector />}\r\n      >\r\n        {steps.map((label) => (\r\n          <Step key={label}>\r\n            <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      <div className=\"stepper-body\">\r\n        {getStepContent(activeStep)}\r\n        <div className=\"btn\">\r\n          <div className=\"cont-btns\">\r\n            <Button\r\n              disabled={activeStep === 0}\r\n              onClick={handleBack}\r\n              className={classes.button}\r\n            >\r\n              <ArrowLeft className=\"icon\" /> <span>Back</span>\r\n            </Button>\r\n            {activeStep !== steps.length - 1 ? (\r\n              <Button variant=\"contained\" onClick={handleNext} className=\"btn\">\r\n                <span>Next step</span> <ArrowRight className=\"icon\" />\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                onClick={downloadResume}\r\n                variant=\"contained\"\r\n                className=\"btn\"\r\n              >\r\n                Download resume\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapDispatch = (dispatch) => ({\r\n  setCvMakerTitle: (title) => dispatch(changeCvMakerTitle(title)),\r\n});\r\nconst mapState = (state) => ({\r\n  templateURL: state.appReducer.templateURL,\r\n});\r\nexport default connect(mapState, mapDispatch)(CustomizedSteppers);\r\n",["64","65"],"D:\\Projects\\cv-maker\\src\\index.js",[],["66","67"],"D:\\Projects\\cv-maker\\src\\Redux\\Reducer.jsx",[],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Experiences.jsx",["68"],"D:\\Projects\\cv-maker\\src\\Redux\\Actions.jsx",[],"D:\\Projects\\cv-maker\\src\\Redux\\Store.jsx",[],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\resumeObjective.jsx",[],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\Interests.jsx",[],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\ResumeObjective.jsx",[],["69","70"],"D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Experiences\\Comps\\Hobby.jsx",["71"],"import React, { useState } from \"react\";\r\nimport { Close, Edit, Menu } from \"@material-ui/icons\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport uuid from \"react-uuid\";\r\n\r\nconst Hobby = ({ showEditor, setShowEditor, addAnotherHobby }) => {\r\n  const [dragItems, setDragItems] = useState([]);\r\n  const [value, setValue] = useState(\"\");\r\n  const [btnText, setBtnText] = useState({ id: null, text: true });\r\n  const saveNewHobby = (e) => {\r\n    const newHobby = { id: uuid(), text: value };\r\n    setDragItems([...dragItems, newHobby]);\r\n    setValue(\"\");\r\n  };\r\n  const removeItem = (ind) => {\r\n    setDragItems([...dragItems.filter((it, i) => i !== ind)]);\r\n  };\r\n  const handleEditItem = (i) => {\r\n    setShowEditor(true);\r\n    setValue(dragItems[i].text);\r\n    setBtnText({ id: i, text: false });\r\n  };\r\n  const editButton = () => {\r\n    const newItems = dragItems.map((it, i) => {\r\n      if (btnText.id === i) return { text: value, id: it.id };\r\n    });\r\n    setValue(\"\");\r\n    setBtnText({ id: 0, text: true });\r\n    setDragItems([...newItems]);\r\n  };\r\n  const handleOnDragEnd = (res) => {\r\n    if (!res.destination) return;\r\n    const newItems = Array.from(dragItems);\r\n    const [reorderedItem] = newItems.splice(res.source.index, 1);\r\n    newItems.splice(res.destination.index, 0, reorderedItem);\r\n    setDragItems(newItems);\r\n  };\r\n  return (\r\n    <div className=\"hobby\">\r\n      <DragDropContext onDragEnd={handleOnDragEnd}>\r\n        <Droppable droppableId=\"items\">\r\n          {(provided) => (\r\n            <div\r\n              className=\"items\"\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {dragItems.map((item, i) => (\r\n                <Draggable key={item.id} draggableId={item.id} index={i}>\r\n                  {(provided, snap) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                    >\r\n                      <div\r\n                        className=\"item\"\r\n                        style={{\r\n                          backgroundColor: snap.isDragging\r\n                            ? \"rgba(0, 0, 0, 0.105)\"\r\n                            : \"white\",\r\n                        }}\r\n                      >\r\n                        <h3\r\n                          style={{\r\n                            color: snap.isDragging ? \"black\" : \"grey\",\r\n                          }}\r\n                        >\r\n                          {item.text}\r\n                        </h3>\r\n                        <div>\r\n                          <Close onClick={() => removeItem(i)} />\r\n                          <Edit onClick={() => handleEditItem(i)} />\r\n                          <Menu />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n      {showEditor && (\r\n        <div className=\"input-add-new\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"e.g: Football..\"\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n          />\r\n          <div className=\"icons\">\r\n            <button>delete</button>\r\n            {btnText.text ? (\r\n              <button onClick={saveNewHobby}>Save</button>\r\n            ) : (\r\n              <button onClick={editButton}>Edit</button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className=\"input\">\r\n        <button onClick={addAnotherHobby}>Add another hobby</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hobby;\r\n","D:\\Projects\\cv-maker\\src\\component\\CreateCV\\Template\\Template.jsx",[],{"ruleId":"72","severity":1,"message":"73","line":210,"column":6,"nodeType":"74","endLine":210,"endColumn":18,"suggestions":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"76","replacedBy":"86"},{"ruleId":"78","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":24,"column":44,"nodeType":"90","messageId":"91","endLine":24,"endColumn":46},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCvMakerTitle'. Either include it or remove the dependency array. If 'setCvMakerTitle' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["92"],"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["93"],["94"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"95","fix":"96"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [activeStep, setCvMakerTitle]",{"range":"97","text":"98"},[4918,4930],"[activeStep, setCvMakerTitle]"]